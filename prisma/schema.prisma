generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id                  String         @id @default(cuid())
  title               String         @db.VarChar(100)
  info                String?        @db.Text
  host                User?          @relation(fields: [authorId], references: [id])
  authorId            String?
  createdAt           DateTime       @default(now()) @map(name: "created_at")
  updatedAt           DateTime       @updatedAt @map(name: "updated_at")
  date                DateTime
  timeLimit           DateTime
  costs               Float
  capacity            Int
  image               String
  currentParticipants Int            @default(0)
  requests            Request[]
  reviews             Review[]
  notifications       Notification[]
  menu                Dish[]
  status              EventStatus    @default(UPCOMING)

  @@index([status], type: BTree)
  @@map(name: "events")
}

enum EventStatus {
  UPCOMING
  OVER
  CANCELLED
}

model Dish {
  id          String  @id @default(cuid())
  title       String  @db.VarChar(100)
  link        String?
  description String? @db.Text
  Event       Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String?

  @@map(name: "dishes")
}

model User {
  id                String         @id @default(cuid())
  firstName         String         @db.VarChar(50)
  lastName          String         @db.VarChar(50)
  email             String         @unique
  dormitory         String?        @db.VarChar(100)
  roomNumber        String?        @db.VarChar(10)
  image             String?
  interests         String?        @db.Text
  phone             String?        @db.VarChar(15)
  instagram         String?        @db.VarChar(50)
  study             String         @db.VarChar(100)
  createdAt         DateTime       @default(now()) @map(name: "created_at")
  updatedAt         DateTime       @updatedAt @map(name: "updated_at")
  events            Event[]
  requests          Request[]
  reviews           Review[]
  notifications     Notification[] @relation("userId")
  fromNotifications Notification[] @relation("userFromId")

  @@index([dormitory], type: BTree)
  @@map(name: "users")
}

model Request {
  id        String        @id @default(cuid())
  status    RequestStatus @default(PENDING)
  User      User?         @relation(fields: [userId], references: [id])
  userId    String?
  Event     Event?        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String?
  createdAt DateTime      @default(now()) @map(name: "created_at")
  updatedAt DateTime      @updatedAt @map(name: "updated_at")
  info      String?

  @@map(name: "requests")
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

model Review {
  id          String   @id @default(cuid())
  dish        Int
  environment Int
  total       Int
  text        String?  @db.Text
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
  Event       Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String?
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "reviews")
}

model Notification {
  id         String           @id @default(cuid())
  message    String           @db.Text
  seen       Boolean          @default(false)
  type       NotificationType
  User       User?            @relation(fields: [userId], references: [id], name: "userId")
  userId     String?
  UserFrom   User?            @relation(fields: [userFromId], references: [id], name: "userFromId")
  userFromId String?
  Event      Event?           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId    String?
  createdAt  DateTime         @default(now()) @map(name: "created_at")
  updatedAt  DateTime         @updatedAt @map(name: "updated_at")

  @@map(name: "notifications")
}

enum NotificationType {
  EVENT
  GENERAL
}

model University {
  id     String @id @default(cuid())
  name   String @unique
  nameEn String
  count  Int    @default(0)
}
